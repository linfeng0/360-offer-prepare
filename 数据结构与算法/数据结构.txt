数据结构：应届生面试的大头，这个东西很重要！
一种数据结构：逻辑结构、存储结构、数据运算
逻辑结构：集合：同种类型，元素间没有别的关系
	  线性结构：一对一
	  树性结构：一对多
	  图结构：  多对多



常见数据结构：
1.线性表（具有相同数据类型的n个数据元素的有限序列，除第一个节点和最后一个节点以外，其他节点都有其只有一个前驱节点和后继节点）
顺序存储：顺序表
	顺序存储，所有节点连续地存储在一块内存空间中
	逻辑上连续，物理上连续
	随机存取，查找可以根据下标直接锁定元素，时间复杂度位O（1）
	插入和删除，为了保证顺序表物理上的连续性，需要移动操作位置之后的所有元素，时间复杂度O（n）

链式存储：链表（单链表保留一个头指针）
	离散存储，节点在物理内存中的存储不要求连续，每一个节点包括data域和指针域，指针域指向该节点的后驱元素
	逻辑上连续，物理上离散
	非随机存取，查找只能从表头开始，时间复杂度O（n）
	插入和删除，只要修改操作结点（及前后）的指针域就可以，时间复杂度O（n）
	链表的建立有两种方法：
		1.头插法：新的节点都是直接插入在表头节点的后面（逆序）
		2.尾插法：必须增加一个尾指针来标注当前链表的最后一个节点，新的节点插入到尾节点之后，并将尾指针想后调整（正序）

比较：
	如果按索引查找操作比较多的话，用顺序表比较好
	如果插入和删除操作比较多的话，用链表比较好
	
	表的长度无法估计的一般用链表来做比较好，链表不用实现估计存储规模，但是链表的存储密度较低
	表的长度确定的，可以直接使用线性表

	顺序表程序实现起来很容易，数组就可以
	链表程序用高级编程语言的类，定义节点的类（包括指针域和数据域）

2.栈和队列：插入和删除受限制的线性表
	栈：先进后出，只允许在栈的一端进行插入和删除操作，保留一个栈顶指针
	队列：先进先出，一头插入，另一头删除，保留一对指针：队头指针和队尾指针

	都有顺序存储和链式存储的存储实现方法
应用：
	栈：中缀表达式--->后缀表达式
	    括号匹配
	    函数递归调用：栈用来保存返回地址和上下文环境
	    递归函数---->非递归函数：对性能要求特别好的时候，可以将递归改成手工栈，自己去控制手工栈的push和pop，来实现递归函数的非递归化，例如树的前序遍历
		


	队列：树的层次遍历
		队列先进先出又可以存储数据的特性，天生适合做缓冲区
		

树：包含N个节点的树性结构，当然还规定了（只有一个根，根节点没有父节点，也就是只有一个没有父结点的结点；树中的所有节点都可以有0个或多个孩子节点）
	高度：树中结点的最大层数
	分为：二叉树--->线索二叉树（利用空指针域存储节点的前驱和后继）---->
	  二叉排序树 ---->二叉平衡树------>B树------>B+树
	



	
