git总结：
  仓库建立：
	到要建立仓库的指定目录，执行git init
	新建了一个.git文件，具有.git文件的文件夹就是一个git本地仓库
  git本地仓库的三大分区及其操作命令：
        首先，这三个分区都是逻辑上的分区，其实都是仓库目录进行操作，只是执行了不同的命令是对不同的区域进行操作，为了方便理解git而做出的分区。这样的分区意识很重要，一定要理解！
	1.工作区：
	可以理解就是当前文件夹，世纪开发中敲代码就是对工作区的修改
	Linux怎么操作目录与文件，工作区就怎么操作，一般涉及到mkdir、touch、rm、vi等操作
	
	2.暂存区：
	对工作区进行修改以后，需要我们将修改递交给暂存区，保证工作区工作完毕的最后版本与暂存区保持一致，方便commit工作区的所有修改，一般涉及到两个命令：

	git add filename
	一般是对工作区增加了一些什么东西（增加：新建，修改），需要我们将这种增加式的修改添加进暂存区
	git rm filename
	一般是在工作去删除了某一个文件，这个时候git add显然不能用，所以就要有git rm这样的命令，告诉暂存区，工作区做了删除文件的操作

	3.版本库：
	git最重要的一个区。git作为一个版本控制工具，最重要的区域当然是版本库，版本库的所有修改都可以跟踪，可以查看也可以回滚
	git commit -m "log"
	 提交暂存区到版本库，head指针向前推进一个版本，-m参数之后跟的是本次提交的日志，一个commit操作都伴随一个commit id，方便回滚
	git reset --hard （HEAD^^/commit_id）
	会滚到指定的版本！
	
工作流程：工作区修改--->提交暂存区（git add/git rm)------>提交版本库(git commit）

	查看状态的指令：
	在工作区修改以后，如果我去上完厕所回来不急的我做些什么修改，为了避免我所做的修改不是头昏眼花修改了一些乱七八糟的东西，最好可以在add到暂存区之前，能够查看我做的修改。
	git status：
	  工作区/暂存区的一切修改，会返回文件级的修改信息（文件内部修改不详细），而且会提醒我们我们可能做的下一步，当前是否已经add过之类的信息
	  add之前返回的工作区的修改信息，add以后是暂存区的修改信息

	git diff:
	  工作区与暂存区的差别，会返回文件修改的详细信息（新建文件是不在这里有返回信息），也就是说add/rm之前对工作区的修改都能用git diff看到，但是add/rm以后，工作区和暂存区一直以后，就不会再有任何返回消息（没有消息就是最好的消息）

	git diff --cached
	  暂存区和版本库的差别，会返回文件修改的详细信息，其实就是git diff加了一个参数罢了，所以返回的信息其实和git diff一样，只不过git diff --cached的针对对象是暂存区，git diff的针对对象是工作区！

	撤销指令：
	在我们查看到状态信息以后，可能由于各种原因，会导致我们想放弃当前对暂存区或者对工作区的修改（撤销对版本库的修改---版本回溯，分开再讲一遍讲）
	对工作区修改的撤销：
	  也就是我要撤销add/rm之前对工作区的修改，这个时候显然暂存区和版本库都没有变化，我们若通过版本回溯来撤销操作可能会连本次修改之前的已经提交过的修改全部回退，显然不是我们想要的，因此有了：
	git checkout -- filename
		撤销对工作区的修改
	对暂存库的修改：
	  如果我们发现当前修改需要撤销的时候已经add/rm操作过暂存区了，那么我们首先需要对暂存库的操作进行撤销。
	git reset HEAD filename 插销对暂存区的修改
	
	版本回溯：
		其实也是一种撤销操作，只是针对的层面是版本库层面，在commit之间进行回溯，所以相来命令跟前两种撤销肯定有异曲同工之妙，果不其然，git的版本回溯用：
	git reset --hard （HEAD^^/commit_id ）
      

	那么我们怎么知道所谓的commit id呢？
	git提供了两个命令：
	git log 返回当前版本之前的所有commit记录日志（当前版本是回溯而来的版本话，其之后的commit是不会返回的）
	git reflog 返回对于当前仓库的所有commit和reset日志

        这两个命令的返回信息的每一次commi里就有commit id
