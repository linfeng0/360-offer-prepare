1.进程、线程与协程：
	首先我们从操作系统的发展谈起，一开始的计算机都是单任务单用户的操作系统，操作系统内永远都只存在一道任务/作业，而我们知道，计算机硬件的速度是有巨大差别的，cpu的速度远远大于内存，内存速度远远大于磁盘等I/O设备的速度，导致程序在运行过程中出现cpu空等I/O。
	这样对cpu的计算资源造成了极大的浪费，为了提高cpu的利用率，引入进程。进程的概念：并发执行的程序在执行过程中分配与管理资源的基本单位，进程保存了一个任务执行的上下文（内存位置，变量，任务ID...），这样在cpu等待I/O操作的时候，就可以切换到另一个进程来使用cpu，而不是任由cpu等着
	那为什么后来有引入了线程呢？
	操作系统发展到一定的阶段，我们发现，进程的并发量超过一定限度以后带来并不是预想的速度增大，而是性能降低，原来，当系统中运行着超多的进程的时候，大量cpu资源被用于进行进程的调度（主要涉及调度算法，调入调出），所以引入一种更轻量的调度单位----线程，在不必要切换进程整个运行上下文的情况下，通过调度线程来替代调度进程

	所以说进程和线程在操作系统来看，本质上都是为了提高cpu利用率引进的一种调度单位，粒度大小不同而已
	进程与线程最大区别点：
		进程是系统资源分配的最小单位，线程是进程内部的一个实体，是程序执行的最小单位，是cpu调度和分派的最小单位
		1.每一个进程都具有自己独立的地址空间，不同进程的地址空间互不干扰
			而同一进程的线程共享进程的地址空间
			
		2.因为进程之间使用独立的地址空间，因此操作系统新建一个进程时，系统为其分配并维护新的地址空间，
		  而同一进程的线程共享进程的地址空间，所以cpu新建一个进程的消耗比新建一个线程要大得多

		
		3.进程切换：
			1.切换页目录，以使用新的地址空间
			2.切换内核栈和硬件上下文
		  进程切换：
			第一步不要做
			而第一步切换页目录使用新的地址空间常常会伴随着磁盘页与内存页的换入换出（I/O操作出了名的慢），
			同时会导致快表缓存作废，导致在一段时间内内存的访问效率降低
			（用不到高速缓存，直接用内存，相对来说也慢了好几个数量级）。
		4.线程共享进程的地址空间的数据，线程之间的通信可以通过共享的变量来进行通信，
			而进程之间通信要以通信的发过誓IPC方式进行。但是编写多线程程序时，要充分考虑同步和互斥
		5.多进程比多线程要健壮。多线程程序但凡一个线程挂掉，整个进程都挂掉，
			而多进程之间没有相互干扰，没有父子关系的进程之间挂掉一个不会影响另一个


		6.多进程程序可以分布在不同的机器上运行，多线程不行



2.进程的内存分布：
	一个进程的内存分布从上往下一般分为：栈段，堆段，bss段（未初始化的数据段），数据段，代码段

	栈段：地址空间增长由高往低，一般用于函数调用时保存返回地址和调用者的寄存器信息
	
	堆栈：地址空间增长由高往低，动态内存分配一般用到的都是堆段
	
	bss段：初始化为0，包含所有没有初始化的全局变量和静态变量
	
	数据段：包含程序内已经初始化的全局变量和静态变量
	
	代码段：包含的是可执行的指令，通常代码段都是共享只读的，对于经常执行的程序，只需要保存一个副本在内存就足够了，只读就是防止程序被修改


3.进程间的通信：
	IPC进程通信方式
	五种进程通信方式：
		IPC持续的概念：
			随进程持续：	IPC一直存在到打开IPC对象的最后进程关闭为止，如管道和命名管道
			随内核持续：	IPC一直持续到内核重启或者删除该对象为止。如消息队列、信号量以及共享内存
			随文件系统持续：IPC一直持续到删除该对象为止
	
		1.管道
			半双工，数据向一个方向流动，规定了一端读一端写
			只能用于具有亲缘关系的进程之间进行通信
			f	
		2.命名管道
			Linux下的管道文件，属于文件系统
			当不同的进程分别读写的方式打开管道文件的时候，内核就会为这两个进程建立命名管道
			因为命名管道属于Linux 的文件系统，所以我们可以通过文件的路径来表示命名管道
			以便为没有亲缘关系的进程建立通信

		3.信号量
			常作用为一种锁机制
		4.信号
			信号机制是进程间通信的异步方式，一个进程不必通过任何操作来等待信号的到达，事实上，进程也不知道信号什么时候到达
		5.消息队列
			消息队列是消息的链接表，有足够权限的进程可以向消息队列中添加或者读取消息
			
		6.内存共享
			由一个进程创建一块可以被多个进程共同访问的内存空间，提高进程通信的效率
			一般会与其他通信方式，如信号量一起使用，来实现进程的同步和互斥
		7.socket
			用于不同主机之间的进程通信
			socket通信首先要建立socket链接





