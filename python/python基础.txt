1.python常用的数据类型：
	不可变对象：number（int、float），str，tuple
	可变对象：list，dict，set
	不可变对象的修改：由于对象不可变，所以修改一个可变对象，需要新建一个对象（开辟一块新的内存空间），并将引用指向新的对象
	可变对象的修改：因为对象可以原地操作，所以不会新建对象，而是直接在原地操作
		所以当两个引用同时指向一个可变对象的时候，对其中一个引用的操作会同步到另一个引用：
		a = [];b = a;a.append(1),print(b) #b = [1]
		a = 1;b=a;a=2;print(b) #b=1


2.python函数传参：
	python参数的种类：位置参数，默认参数，可变参数，关键字参数，命名关键字参数
	python函数的传参都是在函数内部域新建一个引用，指向对应传入参数（这一点很重要）
	因此，传入的是可变对象的话，函数内部对参数的修改在函数外部有效，
	传入的是不可变对象的话，函数内部对参数的修改在函数外部无效，
	还要注意的是，python函数的传参的顺序要严格按照以上顺序传入（尤其是可变参数（元组）和关键字参数（字典））
	另外，默认参数一般不要使用可变对象，因为函数的调用次数并不只有一次，当默认参数使用可变对象时，函数的第二次调用，默认参数的值将是第一次函数调用时调整后的值，除非我们在程序中需要这么做，否则应当避免使用可变对象做默认参数。

3.python的深拷贝，浅拷贝：
	python对象的拷贝大致分为三种：1.复制 2.浅拷贝 3.深拷贝
	1.复制（直接赋值引用）,指向同一地址,两个引用操作完全是同一个对象
		a = [1,2,[3,4],5]
		b = a
			#id(a) = id(b) 成立
		a.append(6) 
		print(b)  # [1,2,[3,4],5,6]
	
	2.浅拷贝(copy.copy(obj)),拷贝了对象本身，但是对象内的字对象是没有递归拷贝的，即浅拷贝生成了一个新的对象，但是浅拷贝生成的新对象与原来对象的子对象是同一个对象
		import copy
		a = [1,2[3,4],5]
		b = copy.copy(a)
			#id(a)!=id(b)  id(a[2]) = id(b[2])
		a.append(6) #a:[1,2,[3,4],5,6] b:[1,2,[3,4],5]
		a[2].append(7)	#a:[1,2,[3,4,7],5,6] b:[1,2,[3,4,7],5]
	
	3.深拷贝(copy.deepcopy(obj)),递归了拷贝了整个对象（包括子对象），所以两个引用的操作实际上是在操作两个不同的对象
		import copy
		a = [1,2[3,4],5]
		b = copy.deepcopy(a)
			#id(a)!=id(b) id(a[2])!=id(b[2])
		a.append(6) #a:[1,2,[3,4],5,6] b:[1,2,[3,4],5]
		a[2].append(7) #a:[1,2[3,4,7],5,6] b:[1,2,[3,4],5]

	总结，复制：完全操作同一个对象，两个引用的操作相互影响
	      浅拷贝：复制了对象的外层，但是对象的子对象还是指向同一地址，对于外层对象的操作，互不影响，子对象操作相互影响
	      深拷贝：复制了整个对象，两个引用指向地址完全无关的对象，所以操作互不影响
	

4.python元类

5.python的三种方法：静态方法，类方法，实例方法

6.python中的类变量和实例变量

7.python自省

8.python推导式（list推导式，set推导式，dict推导式，生成器推导式）

9.python 中的下划线

10.生成器与迭代器

11.with语法与上下文管理器

12.如何理解python中的if __name__ == "__main__"

13.python闭包

14.python面向切面编程与装饰器

15.__metaclass__,__init__,__new__,__call__

16.python实现单例模式

17.python为什么不需要函数重载（python的鸭子特性）

18.python的GIL锁

19.python多进程与多线程

20.协程

21.python匿名函数（lambda表达式）

22.python面向函数编程与高阶函数（应该放到闭包之前）

23.python的垃圾回收机制

24.read，readline和readlines

25.python类
	a）python元类
	b）python类的创建过程
	c）__init__和__new__方法
	d）__slot__属性
	e）__dict__属性
	
26.super方法在新式类中的使用

27.python的内存池机制

28.三种描述符：@staticmethod，@classmethod，@property

29.python字符串与字节序列




